// leitor de qr code
const qrcode = require("qrcode-terminal")
const { Client, Buttons, List, MessageMedia } = require("whatsapp-web.js")
const client = new Client()

client.on("qr", (qr) => {
  qrcode.generate(qr, { small: true })
})

client.on("ready", () => {
  console.log("Tudo certo! WhatsApp conectado.")
})

client.initialize()

const delay = (ms) => new Promise((res) => setTimeout(res, ms))

// Fun√ß√£o para identificar erros comuns de digita√ß√£o
function isGreeting(text) {
  const greetings = [
    "ola",
    "ol√°",
    "oal",
    "alo",
    "al√¥",
    "oi",
    "oii",
    "oie",
    "bom dia",
    "boa tarde",
    "boa noite",
    "hello",
    "hi",
    ".",
    ",",
    "menu",
  ]
  const normalized = text.toLowerCase().replace(/[^a-z√°√©√≠√≥√∫√£√µ√¢√™√Æ√¥√ª√ß\s]/gi, "")
  return greetings.some((g) => normalized.includes(g))
}

// Fun√ß√£o para identificar pedido de suporte
function isSupportRequest(text) {
  const supportWords = [
    "suporte",
    "atendente",
    "humano",
    "ajuda",
    "problema",
    "falar com algu√©m",
    "atendimento",
    "funcionario",
    "pessoa",
    "equipe",
  ]
  const normalized = text.toLowerCase()
  return supportWords.some((w) => normalized.includes(w))
}

// Fun√ß√£o para identificar pedido de cat√°logo
function isCatalogRequest(text) {
  const catalogWords = ["cat√°logo", "catalogo", "lista", "ver cat√°logo", "ver catalogo", "novidades"]
  const normalized = text.toLowerCase()
  return catalogWords.some((w) => normalized.includes(w))
}

// Fun√ß√£o para identificar pedido de pol√≠tica
function isPolicyRequest(text) {
  const policyWords = [
    "pol√≠tica",
    "politica",
    "troca",
    "devolu√ß√£o",
    "garantia",
    "prazo",
    "entrega",
    "pagamento",
    "formas de pagamento",
    "pix",
    "cart√£o",
  ]
  const normalized = text.toLowerCase()
  return policyWords.some((w) => normalized.includes(w))
}

// Fun√ß√£o para verificar hor√°rio de atendimento
function isWithinBusinessHours() {
  const now = new Date()
  const hour = now.getHours()
  return hour >= 8 && hour < 18
}

// Fun√ß√£o para detectar se um atendente humano assumiu o chat
function isHumanAttendant(text) {
  return /aqui √© (vinicius|maria)/i.test(text)
}

// Fun√ß√£o para detectar pedido de atendimento humano
function isRequestHuman(text) {
  return /(suporte|atendimento|falar com atendente|falar com humano)/i.test(text)
}

// Fun√ß√£o para detectar encerramento do atendimento humano
function isHumanEndSession(text) {
  const endWords = [
    "#bot",
    "#automatico",
    "#encerrar",
    "#finalizar",
    "#bot_ativo",
    "bot ativo",
    "ativar bot",
    "voltar bot",
    "bot automatico",
  ]
  const normalized = text.toLowerCase()
  return endWords.some((w) => normalized.includes(w))
}

// Estado do cliente (simples, pode ser expandido para banco de dados)
const userState = {}
const humanAttending = {}

client.on("message", async (msg) => {
  const chat = await msg.getChat()
  const contact = await msg.getContact()
  const name = contact.pushname ? contact.pushname.split(" ")[0] : "cliente"
  const from = msg.from

  // Detecta se um atendente humano assumiu o chat
  if (isHumanAttendant(msg.body)) {
    humanAttending[from] = true
    return
  }

  // Detecta encerramento do atendimento humano (PALAVRAS-CHAVE PARA FUNCION√ÅRIOS)
  if (isHumanEndSession(msg.body)) {
    humanAttending[from] = false
    userState[from] = { step: 1, pedido: null, dados: null, pagamento: false, foraHorario: false }
    await delay(1000)
    await client.sendMessage(
      from,
      `ü§ñ *Bot reativado!* Agora posso te ajudar novamente.\n\nSe precisar de algo, pode me chamar ou digite *menu* para ver as op√ß√µes! üòä`,
    )
    return
  }

  // Detecta pedido de atendimento humano
  if (isRequestHuman(msg.body)) {
    const dentroHorario = isWithinBusinessHours()
    if (dentroHorario) {
      humanAttending[from] = true
      await client.sendMessage(
        from,
        `üë©‚Äçüíº Encaminhando para atendimento humano! Aguarde que um atendente ir√° te responder em breve.`,
      )
    } else {
      await delay(1500)
      await chat.sendStateTyping()
      await delay(2000)
      await client.sendMessage(
        from,
        `‚è∞ *Atendimento Humano Indispon√≠vel*\n\nNosso suporte humanizado funciona das *08:00 √†s 22:00*.\n\nNo momento estamos fora do hor√°rio de atendimento. Assim que abrirmos, nosso time estar√° dispon√≠vel!\n\nEnquanto isso, posso te ajudar com informa√ß√µes b√°sicas. Digite *menu* para ver as op√ß√µes.`,
      )
      // INICIALIZA O ESTADO CORRETAMENTE
      if (!userState[from]) {
        userState[from] = { step: 1, pedido: null, dados: null, pagamento: false, foraHorario: false }
      } else {
        userState[from].step = 1
      }
    }
    return
  }

  // Se humano est√° atendendo, n√£o responde mais (EXCETO se for produto do cat√°logo)
  if (humanAttending[from]) {
    // EXCE√á√ÉO: Se cliente enviar produto do cat√°logo mesmo durante atendimento humano
    if (
      msg.body.includes("Ol√°! Gostaria de comprar o produto:") ||
      msg.body.includes("Gostaria de comprar o produto:") ||
      (msg.body.includes("Tamanho:") && msg.body.includes("Quantidade:") && msg.body.includes("Pre√ßo:")) ||
      (msg.body.includes("Link do Produto:") && msg.body.includes("catalogo-vmshop.vercel.app"))
    ) {
      // Informa que h√° um novo pedido mas mant√©m atendimento humano
      await delay(1000)
      await client.sendMessage(
        from,
        `üîî *Novo produto selecionado detectado!*\n\nVejo que voc√™ selecionou outro produto. Um atendente ir√° te ajudar com este novo pedido tamb√©m!`,
      )
    }
    return
  }

  // Estado inicial
  if (!userState[from]) userState[from] = { step: 0, pedido: null, dados: null, pagamento: false, foraHorario: false }

  // Verifica hor√°rio de atendimento
  const dentroHorario = isWithinBusinessHours()

  // SUPORTE HUMANO
  if (isSupportRequest(msg.body)) {
    await delay(1500)
    await chat.sendStateTyping()
    await delay(2000)

    // Verifica se est√° dentro do hor√°rio comercial
    if (dentroHorario) {
      await client.sendMessage(
        from,
        `Voc√™ deseja falar com algu√©m do nosso time de atendimento?\n\n1Ô∏è‚É£ Sim, quero falar com um atendente humano\n2Ô∏è‚É£ N√£o, quero continuar com o atendimento autom√°tico`,
      )
      userState[from].step = "suporte"
    } else {
      await client.sendMessage(
        from,
        `‚è∞ *Atendimento Humano Indispon√≠vel*\n\nNosso suporte humanizado funciona das *08:00 √†s 22:00*.\n\nNo momento estamos fora do hor√°rio de atendimento, mas voc√™ pode:\n\nü§ñ Continuar usando o atendimento autom√°tico\nüì± Fazer seu pedido normalmente (dados ficam registrados)\nüìã Acessar informa√ß√µes e pol√≠ticas da loja\n\nüí¨ Assim que abrirmos amanh√£, nosso time estar√° dispon√≠vel para te atender!\n\nDigite *menu* para ver as op√ß√µes dispon√≠veis.`,
      )
      // INICIALIZA O ESTADO CORRETAMENTE
      if (!userState[from]) {
        userState[from] = { step: 1, pedido: null, dados: null, pagamento: false, foraHorario: false }
      } else {
        userState[from].step = 1
      }
    }
    return
  }

  if (userState[from].step === "suporte") {
    if (msg.body.trim() === "1") {
      humanAttending[from] = true
      await delay(1500)
      await chat.sendStateTyping()
      await delay(2000)
      await client.sendMessage(
        from,
        `Ok! Em breve um atendente humano ir√° te responder por aqui. Aguarde um momento, por favor. üôã‚Äç‚ôÇÔ∏è`,
      )
      userState[from].step = 0
      return
    }
    if (msg.body.trim() === "2") {
      await delay(1500)
      await chat.sendStateTyping()
      await delay(2000)
      await client.sendMessage(
        from,
        `Sem problemas! Pode continuar sua conversa normalmente. Se precisar de ajuda, √© s√≥ chamar!`,
      )
      userState[from].step = 0
      return
    }
  }

  // IN√çCIO DO FLUXO
  if (userState[from].step === 0 && (isGreeting(msg.body) || msg.body.length <= 3)) {
    await delay(1500)
    await chat.sendStateTyping()
    await delay(2000)
    if (dentroHorario) {
      await client.sendMessage(
        from,
        `Ol√°! Tudo bem? üòä\nEu sou o *Atendente Virtual* da V&M SHOP.\n\nüëâ Acesse nosso cat√°logo completo com as melhores novidades e pre√ßos especiais:\nhttps://catalogo-vmshop.vercel.app/\n\n‚¨ÜÔ∏è T√™nis de alta qualidade e pre√ßos de f√°brica.\nüì¶ Prazo de entrega: 7 a 20 dias √∫teis.\nüí∞ Formas de pagamento: PIX, Cart√£o de Cr√©dito/D√©bito e Boleto\n\nDigite *menu* para ver as op√ß√µes.`,
      )
    } else {
      await client.sendMessage(
        from,
        `‚è∞Ol√°! Tudo bem? üòä\nEu sou o *Atendente Virtual* da *V&M SHOP*.\n\nNosso atendimento humanizado funciona das 08:00 √†s 22:00.\nMas posso te ajudar com d√∫vidas b√°sicas e informa√ß√µes!\n\nüëâ Digite *menu* para ver op√ß√µes, acessar o cat√°logo, pol√≠ticas ou tirar d√∫vidas.\n\nSe quiser iniciar um pedido, pode enviar normalmente e continuaremos o atendimento at√© a coleta dos dados de entrega. O link de pagamento s√≥ pode ser enviado por um atendente humano durante o hor√°rio comercial.`,
      )
      userState[from].foraHorario = true
    }
    userState[from].step = 1
    return
  }

  // FLUXO DE PEDIDO - Detecta mensagem do cat√°logo (PRIORIDADE M√ÅXIMA)
  if (
    msg.body.includes("Ol√°! Gostaria de comprar o produto:") ||
    msg.body.includes("Gostaria de comprar o produto:") ||
    (msg.body.includes("Tamanho:") && msg.body.includes("Quantidade:") && msg.body.includes("Pre√ßo:")) ||
    (msg.body.includes("Link do Produto:") && msg.body.includes("catalogo-vmshop.vercel.app"))
  ) {
    const linkMatch = msg.body.match(/https:\/\/catalogo-vmshop\.vercel\.app\/product\/[a-zA-Z0-9-]+/)
    userState[from].pedido = msg.body
    userState[from].produtoLink = linkMatch ? linkMatch[0] : null

    await delay(1500)
    await chat.sendStateTyping()
    await delay(2000)
    await client.sendMessage(
      from,
      `‚úÖ *Confirma√ß√£o do Pedido*\n\nVoc√™ selecionou o produto acima. Est√° tudo certo com as informa√ß√µes do seu pedido (modelo, cor, tamanho e quantidade)?\n\nüëâ Responda com uma das op√ß√µes abaixo:\n\n1Ô∏è‚É£ Digite 1 para *Sim, tudo certo*.\n2Ô∏è‚É£ Digite 2 para *N√£o, quero corrigir*.\n\n‚ö†Ô∏è Aten√ß√£o na hora de escolher seu n√∫mero, pois n√£o realizamos trocas por erro na escolha da numera√ß√£o. Nossos produtos seguem rigoroso padr√£o de qualidade e s√£o conferidos antes do envio. Por isso, trocas s√≥ ser√£o realizadas em casos raros de defeito de fabrica√ß√£o.`,
    )
    userState[from].step = 2
    return
  }

  // CAT√ÅLOGO - s√≥ responde se N√ÉO for um produto espec√≠fico
  if (isCatalogRequest(msg.body) && !msg.body.includes("catalogo-vmshop.vercel.app")) {
    await delay(1500)
    await chat.sendStateTyping()
    await delay(2000)
    await client.sendMessage(
      from,
      `Confira nosso cat√°logo completo com as melhores novidades e pre√ßos especiais:\nhttps://catalogo-vmshop.vercel.app/\n\nPara comprar, envie o nome do produto, modelo, tamanho e quantidade.`,
    )
    userState[from].step = 1
    return
  }

  // POL√çTICAS
  if (isPolicyRequest(msg.body)) {
    await delay(1500)
    await chat.sendStateTyping()
    await delay(2000)
    await client.sendMessage(
      from,
`üìù *Pol√≠ticas V&M SHOP*\n\n- Trocas: S√≥ realizamos trocas em casos raros de defeito de fabrica√ß√£o. Aten√ß√£o ao escolher o modelo, cor e tamanho do seu t√™nis!\n- Prazo de entrega: 7 a 20 dias √∫teis ap√≥s postagem.\n- Pagamento: PIX, Cart√£o de Cr√©dito/D√©bito ou Boleto.\n- Pol√≠ticas: Voc√™ pode conferir nossas pol√≠ticas com mais detalhes em: https://catalogo-vmshop.vercel.app/policies\n\nDigite *menu* para voltar ao menu inicial`,    )
    return
  }

  // Corre√ß√£o do pedido
  if (userState[from].step === 2) {
    if (msg.body.trim() === "1") {
      await delay(1500)
      await chat.sendStateTyping()
      await delay(2000)
      await client.sendMessage(
        from,
        `√ìtima escolha! üòÅüëü Com certeza voc√™ est√° garantindo um produto que poucos t√™m acesso!\n\nAgora vamos prosseguir com o seu pedido üëá\n\nüì¶üöö Preencha os seguintes dados para uma entrega com seguran√ßa:\n\n1Ô∏è‚É£ Nome completo\n2Ô∏è‚É£ CPF\n3Ô∏è‚É£ CEP\n4Ô∏è‚É£ Endere√ßo completo (rua, n√∫mero, bairro, cidade, estado)\n\nüì¶ A postagem √© feita em at√© 2 dias √∫teis ap√≥s o pagamento.\nüöö Prazo de entrega total: 7 a 20 dias √∫teis.`,
      )
      userState[from].step = 3
      return
    }
    if (msg.body.trim() === "2") {
      await delay(1500)
      await chat.sendStateTyping()
      await delay(2000)
      const linkMsg = userState[from].produtoLink
        ? `\n\nLink do produto selecionado: ${userState[from].produtoLink}`
        : ""
      await client.sendMessage(
        from,
        `Certo! Neste caso, basta voc√™ se dirigir at√© o produto informado e editar as informa√ß√µes conforme deseja.${linkMsg}`,
      )
      userState[from].step = 1
      userState[from].pedido = null
      userState[from].produtoLink = null
      return
    }
    // Caso digite algo diferente
    await client.sendMessage(from, `Por favor, digite *1* para confirmar ou *2* para corrigir seu pedido.`)
    return
  }

  // Recebendo dados de entrega
  if (userState[from].step === 3 && msg.body.length > 10) {
    userState[from].dados = msg.body
    await delay(1500)
    await chat.sendStateTyping()
    await delay(2000)

    // Verifica se est√° dentro do hor√°rio comercial
    if (dentroHorario) {
      await client.sendMessage(
        from,
        `üì¶ √ìtimo! J√° registramos suas informa√ß√µes de entrega!\n\nAgora vou te encaminhar para um atendente do nosso time para continuar o processo de pagamento. O link do Mercado Pago ser√° enviado por um atendente humano em instantes, pois o sistema automatizado n√£o tem capacidade de gerar links de pagamento - isso s√≥ pode ser feito pelo suporte humanizado!\n\nSe quiser tirar d√∫vidas ou acessar informa√ß√µes, digite *menu*.`,
      )
      userState[from].step = 0
      humanAttending[from] = true // Encaminha para atendimento humano APENAS durante hor√°rio comercial
    } else {
      await client.sendMessage(
        from,
        `üì¶ √ìtimo! J√° registramos suas informa√ß√µes de entrega!\n\n‚è∞ *Hor√°rio de Atendimento:* Como estamos fora do hor√°rio comercial (08:00 √†s 22:00), o link de pagamento s√≥ poder√° ser enviado por um atendente humano durante o funcionamento da loja.\n\nüïê Seu pedido ficar√° registrado e assim que iniciarmos o atendimento amanh√£, um de nossos atendentes ir√° te contactar para finalizar o pagamento via Mercado Pago.\n\nüí§ Pode ficar tranquilo que seu produto est√° reservado! Se quiser tirar d√∫vidas ou acessar informa√ß√µes, digite *menu*.`,
      )
      userState[from].step = 1 // MANT√âM BOT ATIVO fora do hor√°rio comercial
      // N√ÉO define humanAttending = true quando fora do hor√°rio
    }
    return
  }

  // Confirma√ß√£o de pagamento
  if (
    userState[from].step === 4 &&
    msg.body.match(/(paguei|pagamento feito|j√° paguei|pago|efetuei o pagamento|comprovante)/i)
  ) {
    userState[from].pagamento = true
    await delay(1500)
    await chat.sendStateTyping()
    await delay(2000)
    await client.sendMessage(
      from,
      `‚úÖ PAGAMENTO CONFIRMADO ‚úÖ\n\nüéâ Obrigado pela sua compra! üéâ\n\nSeu pedido j√° est√° sendo processado e pode ter certeza que voc√™ fez uma √≥tima escolha!\n\nNossos produtos s√£o de qualidade premium e pensados para quem realmente entende do assunto. üòâ\n\nüööüîç Assim que seu pedido for postado, te enviamos o c√≥digo de rastreio por aqui mesmo!\n\nFicou com alguma d√∫vida‚ùî\n√â s√≥ me chamar! Estou sempre por aqui pra te ajudar. üí¨`,
    )
    userState[from].step = 5
    return
  }

  // Postagem do pedido (simula√ß√£o)
  if (
    userState[from].step === 5 &&
    msg.body.match(/(rastreio|c√≥digo|postado|envio|enviado|cad√™ meu pedido|cadastro de rastreio)/i)
  ) {
    await delay(1500)
    await chat.sendStateTyping()
    await delay(2000)
    await client.sendMessage(
      from,
      `üì¶ Seu pedido foi postado! üöÄ\n\nOl√°! Passando pra avisar que o seu produto j√° foi enviado com sucesso! üòÑ\n\nAgora √© s√≥ acompanhar a entrega pelo c√≥digo de rastreio abaixo:\n\nüîç C√≥digo de rastreio: XXX\nüåê Acompanhe sua entrega aqui: https://www2.correios.com.br/sistemas/rastreamento/\n\nüìÖ Prazo estimado de entrega: de 7 a 20 dias √∫teis, conforme informado.\n\nFica de olho por aqui que qualquer atualiza√ß√£o tamb√©m te avisamos! üí¨\nQualquer d√∫vida, √© s√≥ chamar! ü§ùüíö\nV&M SHOP agradece a sua compra!`,
    )
    userState[from].step = 0
    userState[from].pedido = null
    userState[from].dados = null
    userState[from].pagamento = false
    return
  }

  // MENU DE OP√á√ïES
  if (msg.body.match(/menu/i)) {
    await delay(1500)
    await chat.sendStateTyping()
    await delay(2000)
    await client.sendMessage(
      from,
      `üõí *Menu V&M SHOP*\n\n1Ô∏è‚É£ Ver cat√°logo\n2Ô∏è‚É£ Saber como funciona a compra\n3Ô∏è‚É£ Ver pol√≠ticas da loja\n4Ô∏è‚É£ Falar com atendente humano\n5Ô∏è‚É£ D√∫vidas sobre entrega/pagamento\n\nDigite o n√∫mero da op√ß√£o desejada.`,
    )
    userState[from].step = "menu"
    return
  }
  if (userState[from].step === "menu") {
    switch (msg.body.trim()) {
      case "1":
        await client.sendMessage(from, `Confira nosso cat√°logo completo:\nhttps://catalogo-vmshop.vercel.app/`)
        userState[from].step = 1
        break
      case "2":
        await client.sendMessage(
          from,
          `üõí *Como funciona a compra na V&M SHOP?*\n\n1Ô∏è‚É£ Acesse nosso cat√°logo: https://catalogo-vmshop.vercel.app/\n2Ô∏è‚É£ Escolha o produto (modelo, cor, tamanho, quantidade) e clique em *Comprar via WhatsApp*.\n3Ô∏è‚É£ O produto ser√° compartilhado automaticamente aqui na conversa.\n4Ô∏è‚É£ Envie seus dados de entrega (nome, CPF, CEP, endere√ßo completo).\n5Ô∏è‚É£ Receba o link de pagamento do Mercado Pago para finalizar a compra.\n6Ô∏è‚É£ Ap√≥s o pagamento, seu pedido √© postado em at√© 2 dias √∫teis e voc√™ recebe o c√≥digo de rastreio!\n\nDigite *menu* para voltar para o menu inicial.`,
        )
        userState[from].step = 1
        break
      case "3":
        await client.sendMessage(
          from,
          `üìù *Pol√≠ticas V&M SHOP*\n\n- Trocas: S√≥ realizamos trocas em casos raros de defeito de fabrica√ß√£o. Aten√ß√£o ao escolher o n√∫mero do seu t√™nis!\n- Prazo de entrega: 7 a 20 dias √∫teis ap√≥s postagem.\n- Pagamento: Apenas PIX ou cart√£o de cr√©dito √† vista (1x, via link de pagamento).\n- Garantia: Produtos seguem rigoroso padr√£o de qualidade e s√£o conferidos antes do envio.`,
        )
        userState[from].step = 1
        break
      case "4":
        const dentroHorarioMenu = isWithinBusinessHours()
        if (dentroHorarioMenu) {
          await client.sendMessage(from, `Voc√™ deseja falar com algu√©m do nosso time de atendimento?\n\n1Ô∏è‚É£ Sim\n2Ô∏è‚É£ N√£o`)
          userState[from].step = "suporte"
        } else {
          await client.sendMessage(
            from,
            `‚è∞ *Atendimento Humano Indispon√≠vel*\n\nNosso suporte humanizado funciona das *08:00 √†s 22:00*.\n\nNo momento estamos fora do hor√°rio de atendimento. Assim que abrirmos, nosso time estar√° dispon√≠vel!\n\nEnquanto isso, posso te ajudar com informa√ß√µes b√°sicas. Digite *menu* para ver as op√ß√µes.`,
          )
          userState[from].step = 1
        }
        break
      case "5":
        await client.sendMessage(
          from,
`üìù *Pol√≠ticas V&M SHOP*\n\n- Trocas: S√≥ realizamos trocas em casos raros de defeito de fabrica√ß√£o. Aten√ß√£o ao escolher o modelo, cor e tamanho do seu t√™nis!\n- Prazo de entrega: 7 a 20 dias √∫teis ap√≥s postagem.\n- Pagamento: PIX, Cart√£o de Cr√©dito/D√©bito ou Boleto.\n- Pol√≠ticas: Voc√™ pode conferir nossas pol√≠ticas com mais detalhes em: https://catalogo-vmshop.vercel.app/policies\n\nDigite *menu* para voltar ao menu inicial`,        )
        userState[from].step = 1
        break
      default:
        await client.sendMessage(from, `Por favor, digite o n√∫mero da op√ß√£o desejada.`)
    }
    return
  }

  // Resposta padr√£o para mensagens n√£o reconhecidas
  if (msg.body.length < 3) {
    await client.sendMessage(
      from,
      `Ol√°! N√£o entendi sua mensagem. Por favor, envie sua d√∫vida ou digite *menu* para ver op√ß√µes.`,
    )
    return
  }

  // D√∫vidas gerais
  if (msg.body.match(/(duvida|d√∫vida|pergunta|info|informa√ß√£o|informacoes|informa√ß√µes)/i)) {
    await client.sendMessage(from, `Pode enviar sua d√∫vida! Se quiser ver o menu de op√ß√µes, digite *menu*.`)
    return
  }

  // Fallback para qualquer outro cen√°rio
  await client.sendMessage(
    from,
    `Ol√°! N√£o entendi sua mensagem. Por favor, envie sua d√∫vida, o nome do produto que deseja comprar, ou digite *menu* para ver op√ß√µes.`,
  )
})
